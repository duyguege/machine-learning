import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import mean_squared_error, r2_score
import statsmodels.api as sm
from statistics import mean
from scipy import stats
from sklearn.metrics import mean_absolute_error
pd.set_option('display.max_columns', None)
pd.set_option('display.expand_frame_repr', True)
optimize = pd.read_csv("C:\\Users\\User\\Desktop\\dataset2.csv")
print(optimize.head())
print(optimize.describe())
fig, ax = plt.subplots(figsize = (15,7))
ttl = ax.title
plt.tick_params(axis='both', labelsize=18)
sns.set(font_scale=1.6)
sns.heatmap(optimize.corr(), cbar = True, cmap = 'rocket', annot = True, linewidths = 3, annot_kws={"size": 16, "fontweight":'bold'},ax = ax)
ax.tick_params(colors='black')
plt.show()
X = optimize.drop(['tensile_strength'], axis = 1)
y = optimize['tensile_strength']
X.head()
def linear_Regression(x,y):
    x = sm.add_constant(x)
    ols_model = sm.OLS(y,x).fit()
    print(ols_model.summary())
linear_Regression(X,y)
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2, random_state=42)
linear_Regression(X_train,y_train)
linear_Regression(X_test,y_test)
multiple_model2 = sm.OLS(y_train,X_train)
model=multiple_model2.fit()
y_pred = model.predict(X_train)
r2 = r2_score(y_train, y_pred)
rmse = np.sqrt(mean_squared_error(y_train, y_pred))
print("rmse :" + str(rmse))
print(y_train)
print("y_pred for train", y_pred)
print("r2trainols :" + str(r2))
y_predict = model.predict(X_test)

rmse = np.sqrt(mean_squared_error(y_test, y_predict))
print("rmse :" + str(rmse))
print(y_test)
print(y_predict)
r2 = r2_score(y_test, y_predict)
print("r2 :" + str(r2))
a = [200, 50, 0.18, 60]
a = np.array(a) # convert to a numpy array
a = np.expand_dims(a, 0) # change shape from (8,) to (1,8)
model.predict(a)
mae = mean_absolute_error(y_test, y_predict)
print("pred ols değeri:", model.predict(a))
print("MAE OLS değeri:", mae)
df = pd.DataFrame({"Test values":y_test, "Prediction":y_predict}, index=X_test.index)
df.sort_index(inplace=True)
plt.scatter(df.index, df["Test values"], marker="o", label="Test values")
plt.plot(df.index, df["Prediction"], color="r", label="Prediction")
plt.xlabel("Index")
plt.ylabel("Values")
plt.legend()
plt.show()
print("y_pred", y_predict)
sns.regplot(x=y_test, y=y_predict, color='b', label=f"RMSE: {rmse:.2f}, R2: {r2:.2f}")
plt.xlabel('Test Values of T.S. MPa')
plt.ylabel('Predicted Values of T.S. MPa')
plt.legend()
plt.show()
rmse2=np.sqrt(mean_squared_error(y_train, y_pred))
print("rmse2 : "  + str(rmse2) )
mae = mean_absolute_error(y_train, y_pred)
print("mae", mae)










