import pandas as pd
import numpy as np
from lightgbm import LGBMRegressor
from sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import GridSearchCV
from matplotlib import pyplot
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import mean_absolute_error
df_=pd.read_csv("C:\\Users\\User\\Desktop\\dataset2.csv")
df=df_.copy()
df.head()
X = df.drop('tensile_strength', axis=1)
y = df['tensile_strength']
df.head()
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)
X_train.shape
lgbm = LGBMRegressor()
lgbm_model=lgbm.fit(X_train,y_train)
y_pred=lgbm_model.predict(X_train)
y_predict = lgbm_model.predict(X_test)
r2 = r2_score(y_train, y_pred)
print("r2trainLGBM :" + str(r2))
y_pred=lgbm_model.predict(X_test)
lgbm_grid = {
     'colsample_bytree': [0.4, 0.5,0.6], 
     'n_estimators':[50, 100],
     'max_depth': [2,3,4],
     'learning_rate': [0.1, 0.01, 0.5]
}
lgbm = LGBMRegressor()
lgbm_cv = GridSearchCV(lgbm, 
                      param_grid = lgbm_grid, 
                      cv = 10, 
                      n_jobs = -1,
                      verbose = 2)
lgbm_cv.fit(X_train, y_train)
lgbm_cv.best_params_
lgbm_tuned = LGBMRegressor(colsample_bytree = 0.4, 
learning_rate = 0.5, 
max_depth = 2, 
n_estimators = 100) 
lgbm_tuned = lgbm_tuned.fit(X_train,y_train)
y_pred = lgbm_tuned.predict(X_test)
y_predict = lgbm_tuned.predict(X)
R2 = r2_score(y_test, y_pred)
print("r2test :" + str(R2))
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
sns.regplot(y_test, y_pred, color='b', label=f"RMSE: {rmse:.2f}, R2: {R2:.2f}")
plt.xlabel('Test Values of T.S. MPa')
plt.ylabel('Predicted Values of T.S. MPa')
plt.legend()
plt.show()
mae = mean_absolute_error(y_test, y_pred)
print("MAE değeri:", mae)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print("rmse :" + str(rmse))
a = [210, 50, 0.1, 60]
a = np.array(a) # convert to a numpy array
a = np.expand_dims(a, 0) # change shape from (8,) to (1,8)
lgbm_tuned.predict(a)
print("pred lgbm değeri:", lgbm_tuned.predict(a))
plt.title('LGBM')
plt.xlabel('Test Values')
plt.ylabel('Prediction')
plt.legend()
plt.show()
df = pd.DataFrame({"True values":y_test, "Prediction":y_pred}, index=X_test.index)
df.sort_index(inplace=True)
plt.scatter(df.index, df["True values"], marker="o", label="Test values")
plt.plot(df.index, df["Prediction"], color="r", label="Prediction")
plt.xlabel("Index")
plt.ylabel("Values")
plt.legend()
plt.show()
print("y_pred list", y_pred)
Importance=pd.DataFrame({"Importance":lgbm_tuned.feature_importances_},
                       index=X_train.columns)
Importance.sort_values(by="Importance",
                      axis=0,
                      ascending=True).plot(kind="barh",color="g")
sorted_data = Importance.sort_values(by="Importance", axis=0, ascending=True)
ax = sorted_data.plot(kind="barh", color="b")
ax.set_xlabel("Importance/ %")
ax.set_ylabel("Features")
df = pd.DataFrame({"True values":y_test, "Prediction":y_pred}, index=X_train.index)
df.sort_index(inplace=True)
plt.scatter(df.index, df["True values"], marker="o", label="True values")
plt.plot(df.index, df["Prediction"], color="r", label="Prediction")
plt.xlabel("Index")
plt.ylabel("Values")
plt.legend()
plt.show()
